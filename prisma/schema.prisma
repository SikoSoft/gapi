// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Action {
  id         Int         @id @default(autoincrement())
  type       String      @db.VarChar(64)
  desc       String      @db.VarChar(255)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  occurredAt DateTime    @default(now())
  userId     String?     @db.Uuid
  tags       ActionTag[]
}

model ActionTag {
  actionId Int    @default(0)
  label    String @db.VarChar(128)
  action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [label], references: [label], onDelete: Cascade)

  @@id([actionId, label])
}

model Tag {
  label     String      @unique @db.VarChar(128)
  actionTag ActionTag[]
}

model Leaderboard {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(64)
  score    Int      @default(0)
  duration Int      @default(0)
  time     DateTime @updatedAt
  ip       String   @db.VarChar(64)
}

model ListConfig {
  id      String      @id @db.Uuid
  name    String      @db.VarChar(128)
  userId  String?     @db.Uuid
  sort    ListSort?
  filter  ListFilter?
  setting Setting?
}

model ListSort {
  listConfigId String     @unique @db.Uuid
  property     String     @db.VarChar(64)
  direction    String     @db.VarChar(64)
  listConfig   ListConfig @relation(fields: [listConfigId], references: [id], onDelete: Cascade)
}

model ListFilterTime {
  listConfigId String     @unique @db.Uuid
  type         String     @db.VarChar(64)
  date1        String?
  date2        String?
  listFilter   ListFilter @relation(fields: [listConfigId], references: [listConfigId], onDelete: Cascade)
}

model ListFilterText {
  listConfigId String     @id @db.Uuid
  type         String     @db.VarChar(64)
  subStr       String     @db.VarChar(255)
  listFilter   ListFilter @relation(fields: [listConfigId], references: [listConfigId], onDelete: Cascade)
}

model ListFilterTag {
  listConfigId String     @db.Uuid
  type         String     @db.VarChar(64)
  tag          String     @db.VarChar(255)
  listFilter   ListFilter @relation(fields: [listConfigId], references: [listConfigId], onDelete: Cascade)

  @@unique([listConfigId, tag, type])
}

model ListFilter {
  listConfigId      String           @unique @db.Uuid
  includeUntagged   Boolean          @default(false)
  includeAll        Boolean          @default(false)
  includeAllTagging Boolean          @default(false)
  time              ListFilterTime?
  text              ListFilterText[]
  tagging           ListFilterTag[]
  listConfig        ListConfig       @relation(fields: [listConfigId], references: [id], onDelete: Cascade)
}

model User {
  id        String     @id @db.Uuid
  username  String     @unique @db.VarChar(64)
  firstName String     @db.VarChar(64)
  lastName  String     @db.VarChar(64)
  password  String     @db.VarChar(255)
  roles     UserRole[]
}

model UserRole {
  userId  String   @db.Uuid
  roleId  Int      @default(0)
  addedAt DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id])

  @@id([userId(), roleId()])
}

model Role {
  id    Int    @id @default(autoincrement())
  label String @db.VarChar(128)
}

model Session {
  userId    String   @db.Uuid
  authToken String   @id @db.VarChar(128)
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now())
  active    Boolean  @default(true)
}

model LoginAttempt {
  id          Int      @id @default(autoincrement())
  userId      String   @db.Uuid
  attemptedAt DateTime @updatedAt
  ip          String   @db.VarChar(128)
}

model BooleanSetting {
  settingId String  @id @db.Uuid
  name      String  @db.VarChar(128)
  value     Boolean
  setting   Setting @relation(fields: [settingId], references: [id], onDelete: Cascade)
}

model NumberSetting {
  settingId String  @id @db.Uuid
  name      String  @db.VarChar(128)
  value     Int
  setting   Setting @relation(fields: [settingId], references: [id], onDelete: Cascade)
}

model TextSetting {
  settingId String  @id @db.Uuid
  name      String  @db.VarChar(128)
  value     String  @db.VarChar(255)
  setting   Setting @relation(fields: [settingId], references: [id], onDelete: Cascade)
}

model Setting {
  id              String           @unique @db.Uuid
  listConfigId    String           @id @db.Uuid
  booleanSettings BooleanSetting[]
  numberSettings  NumberSetting[]
  textSettings    TextSetting[]
  listConfig      ListConfig       @relation(fields: [listConfigId], references: [id], onDelete: Cascade)
}
